show_plot(tipo,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
summary(ventas)
numericas <- inspect_num(ventas)
show_plot(numericas,
col_palette = 4,
text_labels = TRUE,
label_color = "black")
numericas <- inspect_num(ventas)
show_plot(numericas,
col_palette = 4,
text_labels = TRUE,
label_color = "black")
nums <- ventas[ ,unlist(lapply(ventas, is.numeric))] #variables numéricas
nums$gross.margin.percentage <- NULL #Quitamos la variable constante
ggcorr(nums,  label = TRUE, label_color = "black")
#path<- "C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602"
path <- 'C:/Users/Felipe/Documents/GitHub/2021-1/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602'
#path <- "C:/Users/Matías Diddier/OneDrive/Documentos/GitHub/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602"
setwd(path)
ventas <- read.csv("supermarket_sales.csv")
print(paste('Las dimensiones de los datos son:', dim(ventas)[1], 'filas y', dim(ventas)[2], 'columnas.'))
print(paste('El dataframe posee:',sum(is.na(ventas)), 'datos vacíos.'))
str(ventas)
#Transformamos la variable "género" a binaria
ventas$Gender[ventas$Gender=="Female"]<-1
ventas$Gender[ventas$Gender=="Male"]<-0
ventas$Gender<-as.factor(ventas$Gender)
#Transformamos "Branch", "City" y "Product line" a factor:
ventas$Branch <- as.factor(ventas$Branch)
ventas$City <- as.factor(ventas$City)
ventas$Product.line <- as.factor(ventas$Product.line)
ventas$Payment <- as.factor(ventas$Payment)
#Transformamos la variable "Customer type" a binaria
ventas$Customer.type[ventas$Customer.type=="Member"]<-1
ventas$Customer.type[ventas$Customer.type=="Normal"]<-0
ventas$Customer.type<-as.factor(ventas$Customer.type)
#Transformamos y creamos nuevas variables temporales (dia, hora, fecha)
ventas$Date <- as.Date(ventas$Date, format='%m/%d/%Y')
ventas$Date_time <- as.POSIXct(paste(ventas$Date, ventas$Time), format="%Y-%m-%d %H:%M")
ventas$Time <- as.POSIXct(ventas$Time, format="%H:%M")
ventas$Weekday <- weekdays(ventas$Date)
ventas$Weekday = factor(ventas$Weekday, levels=c('lunes','martes','miércoles','jueves', 'viernes', 'sábado', 'domingo'))
ventas$Hour_num <- hour(ventas$Time) + minute(ventas$Time)/60
str(ventas)
tipo <- inspect_types(ventas)
show_plot(tipo,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
summary(ventas)
numericas <- inspect_num(ventas)
show_plot(numericas,
col_palette = 4,
text_labels = TRUE,
label_color = "black")
nums <- ventas[ ,unlist(lapply(ventas, is.numeric))] #variables numéricas
nums$gross.margin.percentage <- NULL #Quitamos la variable constante
ggcorr(nums,  label = TRUE, label_color = "black")
character <- inspect_cat(ventas)
show_plot(character,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
g1 <- ggplot(ventas) +
aes(x=Rating, y=Total) +
geom_point(size=1, alpha=0.4) + #"size" aumenta el tamaño de los puntos, "alpha" da transparencia
geom_smooth(se=FALSE) + #Agregamos un ajuste no lineal sobre los puntos. "se" integra errores estándares
xlab("Satisfacción según el total de la compra")
g2 <- ggplot(ventas) +
aes(x=Rating, y=Quantity) +
geom_point(size = 1, alpha = .4) +
geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según cantidad comprada")
g3 <- ggplot(ventas) +
aes(x=Rating, y=Unit.price) +
geom_point(size = 1, alpha = .4) +
geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según precio unitario")
typeof(ventas$Time)
g4 <- ggplot(ventas) +
aes(x=Rating, y=Time) +
geom_point(size = 1, alpha = .4) +
#geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
#scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según hora del día")
grid.arrange(g1, g2,g3, g4,nrow = 2) #une las  gráficas.
g2 <- ggplot(ventas, aes(x=Rating, fill=Weekday)) + geom_density(alpha=0.4)+ facet_grid(.~Weekday)+theme(legend.position = "none")
g2
g1 <- ggplot(ventas, aes(x=Rating, fill=factor(Weekday))) + geom_density(alpha=0.4)+ facet_grid(Product.line~Weekday)+theme(legend.position = "none")
g1
g2 <-ggplot(ventas, aes(x=Rating, fill=factor(Payment))) + geom_density(alpha=0.4) + facet_grid(. ~ Payment) +theme(legend.position = "none")
g1 <- ggplot(ventas, aes(x=Rating, fill=factor(Product.line))) + geom_density(alpha=0.4)+ facet_grid(.~Product.line)+theme(legend.position = "none")
g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2, g3,nrow = 3) #une las  gráficas.
g <- ggplot(ventas, aes(y=Total, fill=factor(Branch))) + geom_boxplot(alpha=0.4)
g
g <- ggplot(ventas, aes(y=Total, fill=factor(Branch))) + geom_boxplot(alpha=0.4)+ facet_grid(.~Product.line)
g
g1 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Payment)
g2 <- ggplot(ventas, aes(x=Rating, fill=factor(Product.line))) + geom_density(alpha=0.2)+ facet_grid(Branch~Product.line)+theme(legend.position = "none")
#png(width=800, height=360)
grid.arrange(g1, g2, nrow = 2) #une las  gráficas.
g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+
facet_wrap(.~Product.line, ncol = 3)
g3
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5., cogs))
names(ventas)
str(ventas)
ventas$dia<-as.Date(ventas$ventas, format="%d")
str(ventas)
ventas$dia<-as.Date(ventas$Date, format="%d")
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5.,
cogs,Date_time,ventas))
str(ventas)
ventas$dia<-format(as.Date(ventas$Date,format="%Y-%m-%d"), format = "%d")
str(ventas)
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
#g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
#g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_hist(alpha=0.4) +theme(legend.position = "none")
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
#g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(dia ~ dia) +theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_histogram(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_histogram(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
#g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, y=dia)) + geom_histogram(alpha=0.4)  +theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating,y=dia)) + geom_histogram(alpha=0.4)  +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating,y=dia)) + geom_histogram()  +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating,y=dia)) + geom_bar()  +theme(legend.position = "none")
g1
g1 <-ggplot(ventas, aes(x=Rating,y=dia))
g1
g1 <-ggplot(ventas, aes(x=Rating,y=dia)) + geom_bar()
g1
g1 <-ggplot(ventas, aes(x=Rating,y=dia))
g1 <-ggplot(ventas, aes(x=Rating,y=dia))
g1
g1 <-ggplot(ventas, aes(x=sum(Rating),y=dia))
g1
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_histogram(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2
g1 <- ggplot(ventas) +
aes(x=Rating, y=dia) +
geom_point(size=1, alpha=0.4) + #"size" aumenta el tamaño de los puntos, "alpha" da transparencia
geom_smooth(se=FALSE) + #Agregamos un ajuste no lineal sobre los puntos. "se" integra errores estándares
xlab("Satisfacción según el total de la compra")
g1
ventas %>%
ggplot(aes(x = dia, y = Rating)) +
geom_point(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
barplot(tapply(ventas$Rating, ventas$dia, FUN=sum))
ventas %>%
ggplot(aes(tapply(ventas$Rating, ventas$dia, FUN=sum))) +
geom_point(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
ventas %>%
ggplot(aes(tapply(Rating, dia, FUN=sum))) +
geom_point(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
ventas1 <- ventas
ventas1 %>%
group_by(dia) %>%
summarise(Rating = sum(Rating))
library(dplyr)
ventas1 %>%
group_by(dia) %>%
summarise(Rating = sum(Rating))
ventas1 %>%
ggplot(aes(x = dia, y = Rating)) +
geom_point(color = "darkorchid4") +
labs(title = "Precipitation - Boulder, Colorado",
subtitle = "The data frame is sent to the plot using pipes",
y = "Daily precipitation (inches)",
x = "Date") + theme_bw(base_size = 15)
ventas1 %>%
ggplot(aes(x = dia, y = Rating))
ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_histogram(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_histogram(alpha=0.4)  +theme(legend.position = "none")
ggplot(ventas, aes(x=Rating, y=(dia))) + geom_histogram(alpha=0.4)  +theme(legend.position = "none")
ggplot(ventas, aes(x=Rating, y=dia)) + geom_histogram(alpha=0.4)  +theme(legend.position = "none")
ggplot(ventas, aes(x=Rating, y=dia))
head(ventas1)
head(ventas1)
ventas1 %>%
group_by(dia) %>%
summarise(Rating = sum(Rating))
head(ventas1)
v3 <- ventas1 %>%
group_by(dia) %>%
summarise(Rating = sum(Rating))
head(v3)
ggplot(v3, aes(x=Rating, y=dia))
ggplot(v3) +
aes(x=Rating, y=dia) +
geom_point(size = 1, alpha = .4) +
#geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
#scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según hora del día")
ggplot(v3) +
aes(x=dia, y=Rating) +
geom_point(size = 1, alpha = .4) +
#geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
#scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según hora del día")
ggplot(v3) +
aes(x=dia, y=Rating) +
geom_line(size = 1, alpha = .4) +
#geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
#scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según hora del día")
ggplot(v3) +
aes(x=dia, y=Rating) +
geom_bar(size = 1, alpha = .4) +
#geom_smooth(method = "lm", se = FALSE) + #Agregamos un ajuste lineal sobre los puntos.
#scale_y_log10() + # "scale_y_log10" transforma el eje "y" a logaritmo.
xlab("Satisfacción según hora del día")
g1 <-ggplot(ventas, aes(x=sum(Rating),y=dia))
g2
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_histogram(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
#g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none")
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
#g3 <- ggplot(ventas, aes(x=Rating, fill=factor(Gender))) + geom_density(alpha=0.4)+ facet_grid(.~Gender)+theme(legend.position = "none")
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
g1 <-ggplot(ventas, aes(x=Rating, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
g2 <-ggplot(ventas, aes(x=Total, fill=factor(dia))) + geom_density(alpha=0.4) + facet_grid(. ~ dia) +theme(legend.position = "none", axis.text.x = element_blank())
grid.arrange(g1, g2,nrow = 2) #une las  gráficas.
#Exploración de datos
library(tidyr) #Para manejar bases de datos
library(gridExtra)
library(lubridate)
library(grid)
library(ggplot2) #Para graficos
library(GGally)
library(psych)
library(corrplot)
library(ggpubr)
library(ggrepel)
library(caret)#Para validar y entrenar los modelos
library(knitr)
library(glmnet) #Para modelo Lasso
library(MLmetrics)
library(inspectdf)
#path<- "C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602"
path <- 'C:/Users/Felipe/Documents/GitHub/2021-1/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602'
#path <- "C:/Users/Matías Diddier/OneDrive/Documentos/GitHub/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602"
#setwd(path)
ventas <- read.csv("supermarket_sales.csv")
print(paste('Las dimensiones de los datos son:', dim(ventas)[1], 'filas y', dim(ventas)[2], 'columnas.'))
print(paste('El dataframe posee:',sum(is.na(ventas)), 'datos vacíos.'))
str(ventas)
#Transformamos la variable "género" a binaria
ventas$Gender[ventas$Gender=="Female"]<-1
ventas$Gender[ventas$Gender=="Male"]<-0
ventas$Gender<-as.factor(ventas$Gender)
#Transformamos "Branch", "City" y "Product line" a factor:
ventas$Branch <- as.factor(ventas$Branch)
ventas$City <- as.factor(ventas$City)
ventas$Product.line <- as.factor(ventas$Product.line)
ventas$Payment <- as.factor(ventas$Payment)
#Transformamos la variable "Customer type" a binaria
ventas$Customer.type[ventas$Customer.type=="Member"]<-1
ventas$Customer.type[ventas$Customer.type=="Normal"]<-0
ventas$Customer.type<-as.factor(ventas$Customer.type)
#Transformamos y creamos nuevas variables temporales (dia, hora, fecha)
ventas$Date <- as.Date(ventas$Date, format='%m/%d/%Y')
ventas$Date_time <- as.POSIXct(paste(ventas$Date, ventas$Time), format="%Y-%m-%d %H:%M")
ventas$Time <- as.POSIXct(ventas$Time, format="%H:%M")
ventas$Weekday <- weekdays(ventas$Date)
ventas$Weekday = factor(ventas$Weekday, levels=c('lunes','martes','miércoles','jueves', 'viernes', 'sábado', 'domingo'))
ventas$Hour_num <- hour(ventas$Time) + minute(ventas$Time)/60
ventas$dia<-format(as.Date(ventas$Date,format="%Y-%m-%d"), format = "%d")
str(ventas)
tipo <- inspect_types(ventas)
show_plot(tipo,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
character <- inspect_cat(ventas)
show_plot(character,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
table(ventas$dia)
as.dataframe(table(ventas$dia))
dataframe(table(ventas$dia))
data.frame(table(ventas$dia))
character <- inspect_cat(ventas)
show_plot(character,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
ventas$dia<-format(as.Date(ventas$Date,format="%Y-%m-%d"), format = "%d")
dataframe(table(ventas$dia))
data.frame(table(ventas$dia))
show_plot(character,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
data.frame(table(ventas$dia))
summary(frecuencia_dias)
frecuencia_dias <-data.frame(table(ventas$dia))
summary(frecuencia_dias)
hist(frecuencia_dias)
hist(frecuencia_dias$Freq)
summary(frecuencia_dias)
frecuencia_dias <-data.frame(table(ventas$dia))
summary(frecuencia_dias)
# Construimos un vector que esta formado por números de filas aleatoriamente
index <- sample(1:nrow(ventas), size= nrow(ventas)*0.7)
# Base de entrenamiento: del total de datos, tomamos las filas aletorizadas que tienen datos en index
train <- ventas[index, ]
# Anteponiendo el "-" escogemos las filas en de la base que no están en index
xtrain <- subset(train, select = -c(Rating))
ytrain <- train$Rating
# Se quitan variables correlacionadas
test  <- ventas[-index, ]
xtest <- subset(test, select = -c(Rating))
ytest <- test$Rating
#Regresión autoselección
#train$Gender_product <- train$Product.line*train$Gender
#head(train)
LassoModel <- glmnet(xtrain, ytrain, alpha=1, lambda=1)
coef(LassoModel)
#Regresión autoselección
#train$Gender_product <- train$Product.line*train$Gender
#head(train)
LassoModel <- glmnet(xtrain, ytrain, alpha=1, lambda=0.5)
coef(LassoModel)
#Regresión autoselección
#train$Gender_product <- train$Product.line*train$Gender
#head(train)
LassoModel <- glmnet(xtrain, ytrain, alpha=1, lambda=0.04)
coef(LassoModel)
### Ejecutar Random Forest
train.randomf <- train(Rating ~ Branch + Gender + Product.line
+ Payment + Gender*Payment + Customer.type*Product.line ,
data=train, method="rf",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.randomf)
ggplot(train.randomf)
test.randomf  <- predict(train.randomf, newdata=test)
error.randomf <- test$Rating-test.randomf
error.randomf
frecuencia_dias
names(frecuencia_dias)[1]<-dia
names(frecuencia_dias)[1]<-"dia"
frecuencia_dias
sum(frecuencia_dias$Freq)
summary(frecuencia_dias)
knitr::opts_chunk$set(echo = TRUE)
#Exploración de datos
library(tidyr) #Para manejar bases de datos
library(gridExtra)
library(lubridate)
library(grid)
library(ggplot2) #Para graficos
library(GGally)
library(psych)
library(corrplot)
library(ggpubr)
library(ggrepel)
library(caret)#Para validar y entrenar los modelos
library(knitr)
library(glmnet) #Para modelo Lasso
library(MLmetrics)
library(inspectdf)
#path<- "C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602"
path <- 'C:/Users/Felipe/Documents/GitHub/2021-1/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602'
#path <- "C:/Users/Matías Diddier/OneDrive/Documentos/GitHub/marketinglabs/Tarea_1_IN5602/Tarea_1_IN5602"
#setwd(path)
ventas <- read.csv("supermarket_sales.csv")
print(paste('Las dimensiones de los datos son:', dim(ventas)[1], 'filas y', dim(ventas)[2], 'columnas.'))
print(paste('El dataframe posee:',sum(is.na(ventas)), 'datos vacíos.'))
str(ventas)
#Transformamos la variable "género" a binaria
ventas$Gender[ventas$Gender=="Female"]<-1
ventas$Gender[ventas$Gender=="Male"]<-0
ventas$Gender<-as.factor(ventas$Gender)
#Transformamos "Branch", "City" y "Product line" a factor:
ventas$Branch <- as.factor(ventas$Branch)
ventas$City <- as.factor(ventas$City)
ventas$Product.line <- as.factor(ventas$Product.line)
ventas$Payment <- as.factor(ventas$Payment)
#Transformamos la variable "Customer type" a binaria
ventas$Customer.type[ventas$Customer.type=="Member"]<-1
ventas$Customer.type[ventas$Customer.type=="Normal"]<-0
ventas$Customer.type<-as.factor(ventas$Customer.type)
#Transformamos y creamos nuevas variables temporales (dia, hora, fecha)
ventas$Date <- as.Date(ventas$Date, format='%m/%d/%Y')
ventas$Date_time <- as.POSIXct(paste(ventas$Date, ventas$Time), format="%Y-%m-%d %H:%M")
ventas$Time <- as.POSIXct(ventas$Time, format="%H:%M")
ventas$Weekday <- weekdays(ventas$Date)
ventas$Weekday = factor(ventas$Weekday, levels=c('lunes','martes','miércoles','jueves', 'viernes', 'sábado', 'domingo'))
ventas$Hour_num <- hour(ventas$Time) + minute(ventas$Time)/60
ventas$dia<-format(as.Date(ventas$Date,format="%Y-%m-%d"), format = "%d")
str(ventas)
tipo <- inspect_types(ventas)
show_plot(tipo,
col_palette = 2,
text_labels = TRUE,
label_color = "black")
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5.,
cogs,Date_time,ventas, dia))
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5.,
cogs,Date_time,ventas, dia))
head(ventas)
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5.,
cogs,Date_time,ventas, dia))
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5.,cogs,Date_time,ventas, dia))
head(ventas)
ventas <- subset(ventas, select = -c(gross.margin.percentage, gross.income, Tax.5.,cogs,Date_time,Date, dia))
head(ventas)
### Ejecutar KNN
train.knn <- train(Rating ~ Branch + Gender + Product.line
+ Payment + Gender*Payment + Customer.type*Product.line ,
data=train, method="knn",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
#+Unit.price sin esto llega a 1.74
print(train.knn)
ggplot(train.knn)
test.knn  <- predict(train.knn, newdata=test)
error.knn <- test$Rating-test.knn
error.knn
#+Unit.price sin esto llega a 1.74
print(train.knn)
### Ejecutar Random Forest
train.randomf <- train(Rating ~ Branch + Gender + Product.line
+ Payment + Gender*Payment + Customer.type*Product.line ,
data=train, method="rf",
trControl = trainControl("cv", number=5),
preProcess = c("center","scale"),
tuneLength = 5
)
print(train.randomf)
ggplot(train.randomf)
test.randomf  <- predict(train.randomf, newdata=test)
error.randomf <- test$Rating-test.randomf
error.randomf
print(train.randomf)
ggplot(train.randomf)
#Empezamos comparando los modelos
ventas.test <- data.frame(lm=test.lm,  knn=test.knn,  rf=test.randomf, ventas=ytest)
#Empezamos comparando los modelos
ventas.test <- data.frame(  knn=test.knn,  rf=test.randomf, ventas=ytest)# agregar lm=test.lm,
error.test <- data.frame( knn=error.knn, rf=error.randomf)#agregar lm=error.lm,
summary(abs(error.test))
summary(error.test)
boxplot(abs(subset(error.test, select=-lm))); title(main="ML models", sub="Forecasting Absolute Errors")
boxplot(abs(subset(error.test))); title(main="ML models", sub="Forecasting Absolute Errors")

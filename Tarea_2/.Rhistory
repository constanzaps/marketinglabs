logit_Fish <- mlogit(mode ~ price + catch| income, Fish)
summary(logit_Fish)
probit_Fish <- mlogit(mode ~ price + catch| income, Fish, probit=TRUE)
probit_Fish <- mlogit(mode ~ price + catch| income, Fish, probit=TRUE,
reflevel = 'charter')
probit_Fish <- mlogit(mode ~ price + catch| income, Fish, probit=TRUE,
reflevel = 'charter')
summary(probit_Fish)
probit_Fish <- mlogit(mode ~ price + catch| income, Fish, probit=TRUE,
reflevel = 'beach')
knitr::opts_chunk$set(echo = TRUE)
#Se limpia el espacio de trabajo
library(mlogit)
library(ggplot2)
library(gmnl)
rm(list=ls())				# Limpiamos todos los objetos creados en R
graphics.off()	    # se limpian los graficos
#Se carga la base de datos
data("Fishing", package = "mlogit")
head(Fishing, 5)
Fish <- mlogit.data(Fishing, shape="wide", varying=2:9, choice="mode")
logit_Fish <- mlogit(mode ~ price + catch| income, Fish)
summary(logit_Fish)
#Transformamos la data de wide a long
Fishing_long <- reshape(Fishing, direction = "long",
varying = list(price = 2:5, catch = 6:9),
v.names = c("price", "catch"),
timevar = "modalidad")
n_order <- order(Fishing_long$id, Fishing_long$modalidad)
Fishing_long <- Fishing_long[n_order,]
#Codificamos las opciones
Fishing_long$mode <- as.character(Fishing_long$mode)
Fishing_long$modalidad[which(Fishing_long$modalidad==1)] <- "beach"
Fishing_long$modalidad[which(Fishing_long$modalidad==2)] <- "pier"
Fishing_long$modalidad[which(Fishing_long$modalidad==3)] <- "boat"
Fishing_long$modalidad[which(Fishing_long$modalidad==4)] <- "charter"
ggplot(Fishing_long, aes(x=price, fill=modalidad))+
geom_histogram(alpha=0.7, position="identity", bins=100)+
scale_x_log10()
probit_Fish <- mlogit(mode ~ price + catch| income, Fish, probit=TRUE,
reflevel = 'beach')
probit_Fish <- mlogit(mode ~ price + catch| income, Fish, probit=TRUE,
reflevel = 'charter')
summary(probit_Fish)
logit_Fish <- mlogit(mode ~ price + catch| income, Fish, reflevel = 'charter')
summary(logit_Fish)
# Tomando el output del probit calculado, creamos una matriz de ceros:
C <- matrix(0, 3, 3)
#rellenamos la matriz triangular inferior con los coeficientes del output. Se debe fijar las posiciones, en mi ejemplo, coeficientes 6 a 10 del output
C[!upper.tri(C)] <- c(1, coef(probit_Fish)[9:13])
View(C)
V = C %*% t(C)
V
View(C)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=Fish, model='lc', Q=2) #ejecutamos el modelo
summary(gmnl_fish) #summary del modelo construido
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=Fish, model='lc', Q=2) #ejecutamos el modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
#Se limpia el espacio de trabajo
library(mlogit)
library(ggplot2)
library(gmnl)
rm(list=ls())				# Limpiamos todos los objetos creados en R
graphics.off()	    # se limpian los graficos
#Se carga la base de datos
data("Fishing", package = "mlogit")
head(Fishing, 5)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
library(mlogit)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
library(gmnl)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
summary(gmnl_fish) #summary del modelo construido
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
summary(gmnl_fish) #summary del modelo construido
library(mlogit)
library(gmnl)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 , data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
| income
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:10, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
summary(gmnl_fish) #summary del modelo construido
detach("package:mlogit", unload=TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/mlogit/mlogit_1.0-2.tar.gz", repos=NULL,type="source")
library(mlogit)
library(mlogit)
library(mlogit)
library(mlogit)
library(mlogit)
library(gmnl)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
library(mlogit)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
detach("package:mlogit", unload=TRUE)
knitr::opts_chunk$set(echo = TRUE)
install.packages("https://cran.r-project.org/src/contrib/Archive/mlogit/mlogit_1.0-2.tar.gz", repos=NULL,type="source")
#Se limpia el espacio de trabajo
library(mlogit)
library(ggplot2)
library(gmnl)
rm(list=ls())				# Limpiamos todos los objetos creados en R
graphics.off()	    # se limpian los graficos
#Se carga la base de datos
data("Fishing", package = "mlogit")
head(Fishing, 5)
Fish <- mlogit.data(Fishing, shape="wide", varying=2:9, choice="mode")
logit_Fish <- mlogit(mode ~ price + catch| income, Fish, reflevel = 'charter')
summary(logit_Fish)
#library(mlogit)
#library(gmnl)
data_gmnl <- mlogit.data(Fishing, shape = "wide", varying = 2:9, choice = "mode", id.var = 'mode') #adecuamos la data al modelo
gmnl_fish <- gmnl(mode ~ price | 1 | catch | 0 | income, data=data_gmnl, model='lc', Q=2) #ejecutamos el modelo
summary(gmnl_fish) #summary del modelo construido
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
library(dplyr)
library(gridExtra)
#library(lubridate)
library(grid)
library(GGally) ## ggcorr
#library(psych)
library(corrplot)
library(ggpubr)
library(ggrepel)
#library(caret)
library(knitr)
library(glmnet)
#library(MLmetrics)
library(inspectdf)
library(plyr)
library(reshape2)
library(mlogit)
library(gmnl)
library(tidyr)
library(dplyr)
library(gridExtra)
#library(lubridate)
library(grid)
library(GGally) ## ggcorr
#library(psych)
library(corrplot)
library(ggpubr)
library(ggrepel)
#library(caret)
library(knitr)
library(glmnet)
#library(MLmetrics)
library(inspectdf)
library(plyr)
library(reshape2)
library(mlogit)
library(gmnl)
setwd("~/GitHub/2021-1/marketinglabs/Tarea_2")
#path <-'C:/Users/Asus/Desktop/Noveno semestre/mkt/TAREA 2/'
#path <-'C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_2/'
anime <- read.csv("anime2.csv"))
#path <-'C:/Users/Asus/Desktop/Noveno semestre/mkt/TAREA 2/'
#path <-'C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_2/'
anime <- read.csv("anime2.csv")
anime <- anime[-c(1)]
View(anime)
#path <-'C:/Users/Asus/Desktop/Noveno semestre/mkt/TAREA 2/'
#path <-'C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_2/'
anime <- read.csv("anime2.csv")
anime <- anime[-c(1)]
#Cambiamos los tipos de ciertas variables
anime$Expertos <-as.factor(anime$Expertos)
anime$Capitulos <-as.factor(anime$Capitulos)
anime$Animes <-as.factor(anime$Animes)
anime$Mujer <-as.factor(anime$Mujer)
anime$Eleccion <-as.factor(anime$Eleccion)
#anime$Elegido<-  as.factor(anime$Elegido)
# anime$Animes[anime$Animes==1] <- "HxH"
# anime$Animes[anime$Animes==2] <- "DB"
# anime$Animes[anime$Animes==3] <- "N"
# anime$Animes[anime$Animes==4] <- "BNHA"
summary(anime)
anime
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))],
select=-c(CantCaps,Edad,Expertos,Scoremyanimelist)) #Animes,
#path <-'C:/Users/Asus/Desktop/Noveno semestre/mkt/TAREA 2/'
#path <-'C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_2/'
anime <- read.csv("anime2.csv")
anime <- anime[-c(1)]
#Cambiamos los tipos de ciertas variables
anime$Expertos <-as.factor(anime$Expertos)
anime$Capitulos <-as.factor(anime$Capitulos)
anime$Animes <-as.factor(anime$Animes)
anime$Mujer <-as.factor(anime$Mujer)
anime$Eleccion <-as.factor(anime$Eleccion)
#anime$Elegido<-  as.factor(anime$Elegido)
# anime$Animes[anime$Animes==1] <- "HxH"
# anime$Animes[anime$Animes==2] <- "DB"
# anime$Animes[anime$Animes==3] <- "N"
# anime$Animes[anime$Animes==4] <- "BNHA"
summary(anime)
anime
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))],
select=-c(CantCaps,Edad,Expertos,Scoremyanimelist)) #Animes,
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,low = "#56b1f7", mid = "white", high = "#132b43",layout.exp = 3,label = TRUE, label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#56b1f7", mid = "white", high = "#132b43",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#5882FA", mid = "#A4A4A4", high = "#FA5858",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#08298A", mid = "#A4A4A4", high = "#B40404",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0404B4", mid = "#A4A4A4", high = "#B40404",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0404B4", mid = "#A4A4A4", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0404B4", mid = "#BDBDBD", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0000FF", mid = "#BDBDBD", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0000FF", mid = "#E6E6E6", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0000FF", mid = "#CCEEFF", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0000FF", mid = "white", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
low = "#0000FF", mid = "white", high = "#FF0000",
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
ggcorr(cor(nums), hjust = 1, size = 4,
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
calidad_anime <- ggplot(anime, aes(x=Animes, y=CalidadAnimacion, color=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Calidad de animación por anime')
rating_anime <- ggplot(anime, aes(x =factor(Animes), y=RatingTV,color=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Rating TV por anime')
ggarrange(calidad_anime,rating_anime, nrow=1, ncol=2)
rating_anime <- ggplot(anime, aes(x=Animes, y=RatingTV, fill=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Rating TV por anime')
ggarrange(calidad_anime,rating_anime, nrow=1, ncol=2)
calidad_anime <- ggplot(anime, aes(x=Animes, y=CalidadAnimacion, fill=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Calidad de animación por anime')
rating_anime <- ggplot(anime, aes(x=Animes, y=RatingTV, fill=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Rating TV por anime')
ggarrange(calidad_anime,rating_anime, nrow=1, ncol=2)
calidad_anime <- ggplot(anime, aes(x=Animes, y=CalidadAnimacion, fill=Animes))+
geom_boxplot()+
theme(legend.position="none",
plot.title = element_text(hjust = 0.5))+
ggtitle('Calidad de animación por anime')
rating_anime <- ggplot(anime, aes(x=Animes, y=RatingTV, fill=Animes))+
geom_boxplot()+
theme(legend.position="none",
plot.title = element_text(hjust = 0.5))+
ggtitle('Rating TV por anime')
ggarrange(calidad_anime,rating_anime, nrow=1, ncol=2)
comba.anim <- ggplot(anime, aes(x=Animes, y=NEscenasCombate,color=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Cantidad de escenas de combate por anime')#+
emocio.anim <- ggplot(anime, aes(x=Animes, y=NescenasEmocionantes,color=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Cantidad de escenas emocionantes por anime')
ggarrange(comba.anim,emocio.anim, nrow=1, ncol=2)
comba.anim <- ggplot(anime, aes(x=Animes, y=NEscenasCombate, fill=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Cantidad de escenas de combate por anime')#+
emocio.anim <- ggplot(anime, aes(x=Animes, y=NescenasEmocionantes, fill=Animes))+
geom_boxplot()+
theme(legend.position="none")+
ggtitle('Cantidad de escenas emocionantes por anime')
ggarrange(comba.anim,emocio.anim, nrow=1, ncol=2)
comba.anim <- ggplot(anime, aes(x=Animes, y=NEscenasCombate, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas de combate por anime')
emocio.anim <- ggplot(anime, aes(x=Animes, y=NescenasEmocionantes, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas emocionantes por anime')
ggarrange(comba.anim,emocio.anim, nrow=1, ncol=2)
ggplot(anime, aes(x=NEscenasCombate, y=NEscenasEmocionantes, color=Anime))+
geom_point()
ggplot(anime, aes(x=NEscenasCombate, y=NescenasEmocionantes, color=Anime))+
geom_point()
ggplot(anime, aes(x=NEscenasCombate, y=NescenasEmocionantes, color=Animes))+
geom_point()
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate))+
geom_point(alpha=0.5)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate))+
geom_point(alpha=0.7)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate))+
geom_point(alpha=0.2)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha=0.2)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha=0.2)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point()
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.1)
# anime$Animes[anime$Animes==1] <- "HxH"
# anime$Animes[anime$Animes==2] <- "DB"
# anime$Animes[anime$Animes==3] <- "N"
# anime$Animes[anime$Animes==4] <- "BNHA"
anime_unique <- unique(anime[,2:12])
# anime$Animes[anime$Animes==1] <- "HxH"
# anime$Animes[anime$Animes==2] <- "DB"
# anime$Animes[anime$Animes==3] <- "N"
# anime$Animes[anime$Animes==4] <- "BNHA"
anime_long <- anime
anime <- unique(anime[,2:12])
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
calidad_anime <- ggplot(anime, aes(x=Animes, y=CalidadAnimacion, fill=Animes))+
geom_boxplot()+
theme(legend.position="none",
plot.title = element_text(hjust = 0.5))+
ggtitle('Calidad de animación por anime')
rating_anime <- ggplot(anime, aes(x=Animes, y=RatingTV, fill=Animes))+
geom_boxplot()+
theme(legend.position="none",
plot.title = element_text(hjust = 0.5))+
ggtitle('Rating TV por anime')
ggarrange(calidad_anime,rating_anime, nrow=1, ncol=2)
comba.anim <- ggplot(anime, aes(x=Animes, y=NEscenasCombate, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas de combate por anime')
emocio.anim <- ggplot(anime, aes(x=Animes, y=NescenasEmocionantes, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas emocionantes por anime')
ggarrange(comba.anim,emocio.anim, nrow=1, ncol=2)
comba.anim <- ggplot(anime, aes(x=Animes, y=NEscenasCombate, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas de combate por anime')
emocio.anim <- ggplot(anime, aes(x=Animes, y=NescenasEmocionantes, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas emocionantes por anime')
ggarrange(comba.anim,emocio.anim, nrow=1, ncol=2)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.1)
View(anime_long)
#path <-'C:/Users/Asus/Desktop/Noveno semestre/mkt/TAREA 2/'
#path <-'C:/Users/Asus/Documents/GitHub/marketinglabs/Tarea_2/'
anime <- read.csv("anime2.csv")
anime <- anime[-c(1)]
#Cambiamos los tipos de ciertas variables
anime$Expertos <-as.factor(anime$Expertos)
anime$Capitulos <-as.factor(anime$Capitulos)
anime$Animes <-as.factor(anime$Animes)
anime$Mujer <-as.factor(anime$Mujer)
anime$Eleccion <-as.factor(anime$Eleccion)
#anime$Elegido<-  as.factor(anime$Elegido)
# anime$Animes[anime$Animes==1] <- "HxH"
# anime$Animes[anime$Animes==2] <- "DB"
# anime$Animes[anime$Animes==3] <- "N"
# anime$Animes[anime$Animes==4] <- "BNHA"
anime_long <- anime
anime <- anime %>%
select(-c(Expertos, Edad, Mujer, Eleccion)) %>%
unique(.)
summary(anime)
anime
nums <- subset(anime[ ,unlist(lapply(anime, is.numeric))])
ggcorr(cor(nums), hjust = 1, size = 4,
layout.exp = 3, label = TRUE,label_size = 4, label_round = 2)
calidad_anime <- ggplot(anime, aes(x=Animes, y=CalidadAnimacion, fill=Animes))+
geom_boxplot()+
theme(legend.position="none",
plot.title = element_text(hjust = 0.5))+
ggtitle('Calidad de animación por anime')
rating_anime <- ggplot(anime, aes(x=Animes, y=RatingTV, fill=Animes))+
geom_boxplot()+
theme(legend.position="none",
plot.title = element_text(hjust = 0.5))+
ggtitle('Rating TV por anime')
ggarrange(calidad_anime,rating_anime, nrow=1, ncol=2)
comba.anim <- ggplot(anime, aes(x=Animes, y=NEscenasCombate, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas de combate por anime')
emocio.anim <- ggplot(anime, aes(x=Animes, y=NescenasEmocionantes, fill=Animes))+
geom_boxplot()+
theme(legend.position="none", plot.title = element_text(hjust = 0.5))+
ggtitle('Cantidad de escenas emocionantes por anime')
ggarrange(comba.anim,emocio.anim, nrow=1, ncol=2)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.1)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad de escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, size=RatingTV, y=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEcomocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(.1, 24))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(.1, 3))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(1, 10))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(5, 10))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(5, 8))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(4, 7))
ggplot(anime, aes(x=Dura, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=DuracionCapituloMin, y=RatingTV, size=NEscenasCombate, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=DuracionCapituloMin, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas de combate y el anime")
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(1, 5))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(1, 7))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(1, 3, 57))
ggplot(anime, aes(x=Capitulos, y=RatingTV, size=NescenasEmocionantes, color=Animes))+
geom_point(alpha = 0.5)+
labs(title = "Relación entre Rating, el número del capitulo, la cantidad\nde escenas emocionantes y el anime")+
scale_size(range = c(1, 6))
